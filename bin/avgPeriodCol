#!/usr/local/bin/python
import sys
import shlex #for smart splitting to preserve enquoted text
from pylab import *
import numpy as np

if len(sys.argv) <= 1:
    print 'USAGE: ', sys.argv[0],'data_file [columnNumber]'
    print '    where data_file has data in columns with an optional one-line header.'
    print '    Data are delimited by white-space. The first column is assumed to be'
    print '    the independent variable'
    print '    The middle-click button is then used peaks to find the average period.'
    sys.exit()

# stop reading file if change in any of the data values is > THRESHOLD
#THRESHOLD = 9e9
#THRESHOLD = 1e3
#THRESHOLD = 10

data = []
with open(sys.argv[1]) as f:

    #line = f.readline().split()
    line = shlex.split(f.readline())
    print line
    Nvar = len(line) - 1
    try:
        float(line[0]) # first line is data
        varNames = ['x'] + ['y'+str(i) for i in range(1,Nvar+1)]
    except ValueError: # first line is header
        varNames = line
        line = f.readline().split()
    print Nvar,'dependent variables in file :',varNames

    # save first line of data
    for val in line:
        data.append([float(val)])

    # read rest of file
    prevValues = []
    for line in f:
        values = [float(s) for s in line.split()]
#        if len(prevValues) > 0:
#            delta = [abs(v2/v1) for v1,v2 in zip(prevValues,values)]
#            #if any(delta > THRESHOLD):
#            if any([r > THRESHOLD for r in delta]):
#                print 'WARNING: solution blow up detected! (TRESHOLD='+str(THRESHOLD)+')'
#                print '  previous values',prevValues
#                print '  current values ',values
#                break
        # save data
        for col,val in zip(data,values):
            col.append(float(val))
        prevValues = values

if Nvar==0: #single column of data
    Nvar = 1
    N = len(data[0])
    data = [range(1,N+1), data[0]]
    varNames += ['y']

selectedVar = int(sys.argv[2])
print 'Plotting variable:',varNames[selectedVar]

fig = figure()
dataAxes = fig.add_subplot(111)
dataAxes.plot(data[0],data[selectedVar],'-')
xlabel('t [s]')
ylabel('signal')

#=========================================================================================
# begin period averaging code
#
selectedPoints = []
def onClick(event):
    #print 'button=%d, x=%d, y=%d, xdata=%f, ydata=%f' % \
    #    (event.button, event.x, event.y, event.xdata, event.ydata)
    if event.button==2: # middle click
        try:
            print 'Searching for point near %f,%f' % (event.xdata,event.ydata)
        except: return
        idx = np.argmin(np.abs( data[0] - event.xdata ))
        selectedPoints.append( data[0][idx] )
        print '  - found point at %f,%f' % (data[0][idx],data[selectedVar][idx])
        dataAxes.plot(data[0][idx],data[selectedVar][idx],'r^')
        print '    peak locations',selectedPoints
        if len(selectedPoints) > 1:
            period = np.diff(np.array(selectedPoints))
            print '    T :',period
            print '    average T =',np.mean(period)
        draw()

cid = fig.canvas.mpl_connect('button_press_event', onClick)
# end FFT code
#=========================================================================================

show()

